--- Utente ---

context Utente
inv: self.zone_interesse -> forAll(z | z.utente == self)
inv: self.percorsi -> forAll(p | p.utente == self)
inv: self.auth_token.isEmpty() == self.is_authenticated


--- Utente Autenticabile --- 

context UtenteAutenticabile::login(_username, _password)
pre: self.is_authenticated == false
post: !self.auth_token.isEmpty()

context UtenteAutenticabile::deauthenticate()
pre: self.is_authenticated == true
post: self.auth_token.isEmpty()

context Utente::aggiungiZona(zona: ZonaDiInteresse)
post: self.zone_interesse -> include(zona)

context Utente::aggiungiPercorso(percorso: Percorso)
post: self.percorsi -> include(percorso)


--- Utente Autorizzato ---

context UtenteAutorizzato
inv: self.eventi_creati -> forAll(e | e.creator == self)
inv: self.categorie_di_competenza -> forAll()

context UtenteAutorizzato::aggiungiEvento(evento: Evento)
post: self.eventi_creati -> include(evento)

context UtenteAutorizzato::aggiungiSottocategoria(categoria: Categoria)
pre: !categoria.supercategoria.isEmpty()
pre: self.categorie_di_competenza -> includes(categoria.supercategoria)
post: self.categorie_di_competenza -> includes(categoria)
post: categoria.owner == self

context UtenteAutorizzato::eliminaSottocategoria(categoria: Categoria)
pre: self.categorie_di_competenza -> includes(categoria)
pre: instanceof(categoria.owner) != UtenteAutorizzato
post: self.categorie_di_competenza -> !includes(categoria)

context UtenteAutorizzato::modificaSottocategoria(categoria: Categoria)
pre: self.categorie_di_competenza -> includes(categoria)
pre: instanceof(categoria.owner) != UtenteAmministratore
post: self.categorie_di_competenza -> includes(categoria.supercategoria)
post: categoria.owner == categoria@pre.owner

context UtenteAutorizzato::aggiungiEvento(evento: Evento)
post: self.categorie_di_competenza -> includes(evento.categoria)
post: self.eventi_creati -> includes(evento)
post: evento.creator == self

context UtenteAutorizzato::modificaEvento(evento: Evento)
pre: evento.creator == self
post: evento.creator == self

context UtenteAutorizzato::eliminaEvento(evento: Evento)
pre: evento.creator == self
post: self.eventi_creati -> !includes(evento)


--- Evento ---

context Evento
inv: self.creator.categorie_di_competenza -> includes(self.categoria)
inv: self.creator.eventi_creati -> includes(self)
inv: self.data_inizio <= self.data_fine
inv: !self.info.isEmpty()


--- Categoria ---
# l'Admin può creare solo categorie "root" con profondità massima di 1
inv: if instanceof(self.owner) == UtenteAmministratore:
        self.supercategoria == None || self.supecategoria->forAll(s | s.supercategoria == None)

# ogni sottoalbero di categorie deve avere una radice in un nodo "Root"
